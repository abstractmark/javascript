const{Tokenize:Tokenize}=require("./src/tokenizer"),{Lex:Lex}=require("./src/lexer"),{Parse:Parse}=require("./src/parser"),version=require("./package.json").version,DEFAULT_STYLE=require("./src/DEFAULT_STYLE"),HELP_TEXT='\nUsage:\n Â» For Converting Abstractmark : run "abstractmark [abstractmark file] [abstractmark options] [args]"\n Â» For Abstractmark\'s Information : run "abstractmark [option]"\nExample:\n Â» (Convert Markdown to HTML) abstractmark example.am\n Â» (Convert Markdown to certain HTML file name) abstractmark example.am myfile.html\n Â» (Checking the Current Version of Abstractmark) abstractmark -v\n\nAbstractmark information options:\n -v, --version ........... show abstractmark current version\n --help .................. informations about AbstractMark CLI\n\nAbstractmark converting options:\n -open ................... Open html file in browser after finish converting. \n -t, --tags .............. Convert to only HTML file which contains only corresponding tags. (Note that AbstractMark CLI converts to full HTML file as default)\n -unstyled ............... Convert to only HTML tags without any style on it.\n',CLEAR_LAST_LINE=()=>{if("undefined"==typeof window){const readline=require("readline");readline.clearLine(process.stdout,0),readline.cursorTo(process.stdout,0)}},CONVERT_STYLESHEET=stylesheets=>{let stylesheetTags="";for(let i=0;i<stylesheets.length;i++)stylesheetTags+=`<link rel="stylesheet" href ="${stylesheets[i]}">`;return stylesheetTags},CONVERT_SCRIPTS=scripts=>{let scriptTags="";for(let i=0;i<scripts.length;i++)scriptTags+=`<script src="${scripts[i]}"><\/script>`;return scriptTags},CONVERT_STYLE_TAGS=styles=>{let styletags="";for(let i=0;i<styles.length;i++)styletags+=`<style>${styles[i]}</style>`;return styletags},CONVERT_TO_FULL_HTML=data=>`<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0">${CONVERT_STYLE_TAGS(data.styles)}${CONVERT_STYLESHEET(data.stylesheets)}${CONVERT_SCRIPTS(data.scripts)}</head><body>${data.body}</body></html>`,MARQUEE_STYLE='\nmarquee {\n  font-size: 20px;\n  transition: all .4s;\n  margin: 10px 5px;\n}\n\n.marquee {\n  position: relative;\n  overflow: hidden;\n  --move-initial: 120vw;\n  --move-final: -100%;\n}\n\n.marquee[data-direction="right"] {\n  --move-initial: -100%;\n  --move-final: 200vw;\n}\n\n.marquee-content {\n  width: fit-content;\n  display: flex;\n  position: relative;\n  transform: translate3d(var(--move-initial), 0, 0);\n  animation: marquee 15s linear infinite;\n  animation-play-state: running;\n}\n\n@keyframes marquee {\n  0% {\n    transform: translate3d(var(--move-initial), 0, 0);\n  }\n  100% {\n    transform: translate3d(var(--move-final), 0, 0);\n  }\n}\n'.replace(/(\r\n|\n|\r)/g,""),cli=()=>{const performaceCheckerStart=Date.now();if("undefined"!=typeof window)throw new Error("AbstractMark CLI not avavilable on browser");const open=require("open"),args=process.argv.slice(2);if(args.length>0)if(args[0].startsWith("-"))"-help"===args[0]?console.log('[33mAbstractMark warning: -help is not a abstractmark command.[0m\n Â» Did you mean "abstractmark --help"?'):"--help"===args[0]?console.log(HELP_TEXT):"-v"===args[0]||"-version"===args[0]||"--v"===args[0]||"--version"===args[0]?console.log(version):console.log('Usage: abstractmark [abstractmark file] [abstractmark options] [args]\n\nSee "abstractmark --help" for more.');else{const convert=(sourceData,htmlFileName)=>{const tokenizedData=Tokenize(sourceData),lexedData=Lex(tokenizedData),parsedData=Parse(lexedData);parsedData.styles.push(MARQUEE_STYLE),process.stdout.write("Converting...");let styled=!0,fullHtmlTags=!0,data;for(let i=1;i<args.length;i++)"-t"===args[i]||"--tags"===args[i]?fullHtmlTags=!1:"-unstyled"!==args[i]&&"--unstyled"!==args[i]||(styled=!1);styled&&parsedData.styles.push(DEFAULT_STYLE),data=fullHtmlTags?CONVERT_TO_FULL_HTML(parsedData):`${CONVERT_STYLE_TAGS(parsedData.styles)}${parsedData.body}`,fs.writeFile(htmlFileName,data,err=>{if(err)throw new Error(err);CLEAR_LAST_LINE(),process.stdout.write(`\nSuccessfully converted ${file} to ${htmlFileName} in ${Date.now()-performaceCheckerStart}ms\n `);for(let i=1;i<args.length;i++)if("-open"===args[i]){process.stdout.write(`Opening ${htmlFileName} on your browser.`);const openFile=async htmlFileName=>(await open(htmlFileName),!0);openFile(htmlFileName).then(()=>{CLEAR_LAST_LINE(),process.stdout.write(`Opened ${htmlFileName} on your browser.\n`)})}})},fs=require("fs");let file=args[0],src;if(fs.lstatSync(file).isDirectory())fs.readdir(file,(err,files)=>{files.forEach(fileName=>{(fileName.endsWith(".am")||fileName.endsWith(".abstractmark"))&&convert(fs.readFileSync(fileName,"utf-8"),`${fileName.split(".").slice(0,-1).join(".")}.html`)})});else{if(!file.endsWith(".am")&&!file.endsWith(".abstractmark"))throw new Error("[31mAbstractMark: only file with extension .am or .abstractmark is allowed[0m");let sourceData=fs.readFileSync(file,"utf-8"),htmlFileName=null;for(let i=1;i<args.length;i++)args[i].startsWith("-")||(htmlFileName=args[i]);htmlFileName||(htmlFileName=`${file.split(".").slice(0,-1).join(".")}.html`),convert(sourceData,htmlFileName)}}else console.log('Usage: abstractmark [abstractmark file] [abstractmark options] [args]\n\nSee "abstractmark --help" for more.')},AbstractMark=(source,options)=>{let tokenizedData=Tokenize(source),lexedData=Lex(tokenizedData),parsedData=Parse(lexedData);return options&&options.styled&&parsedData.styles.push(DEFAULT_STYLE),options&&options.fullHTMLTags?CONVERT_TO_FULL_HTML(parsedData):`${CONVERT_STYLE_TAGS(parsedData.styles)}${CONVERT_STYLESHEET(parsedData.stylesheets)}${CONVERT_SCRIPTS(parsedData.scripts)}${parsedData.body}`};module.exports={cli:cli,AbstractMark:AbstractMark};